import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Shyam Sai Bethina
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        String title = "Empty Title";

        /*
         * Checks if title node has children
         */
        int titleIndex = getChildElement(channel, "title");
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        String description = "No description";

        /*
         * Checks if description node has children
         */
        int descriptionIndex = getChildElement(channel, "description");
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(" <h1><a href='" + link + "'>" + title + "</a></h1>");
        out.println(" <p>" + description + "</p>");
        out.println(" <table border=1>");
        out.println("  <tr>");
        out.println("   <th>Date</th>");
        out.println("   <th>Source</th>");
        out.println("   <th>News</th>");
        out.print("  </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(" </table>");
        out.println("</body>");
        out.print("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        boolean found = false;

        /*
         * Goes through all the children of xml and returns the index of when it
         * finds the first instance with the designated tag, which is when found
         * equals to true.
         */
        for (int i = 0; i < xml.numberOfChildren() && !found; i++) {
            if (tag.equals(xml.child(i).label())) {
                index = i;
                found = true;
            }
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String pubDate = "No date available";
        String titleOrDescr = "No title available";
        String source = "No source available.";
        String link = "";
        String url = "";

        int indexForTitle;
        /*
         * Checks if title tag exists as a child, gets index of description if
         * title tag does not exist
         */
        if (getChildElement(item, "title") != -1) {
            indexForTitle = getChildElement(item, "title");
        } else {
            indexForTitle = getChildElement(item, "description");
        }

        /*
         * Checks if title or description nodes have children
         */
        if (item.child(indexForTitle).numberOfChildren() > 0) {
            titleOrDescr = item.child(indexForTitle).child(0).label();
        }

        int indexForDate;

        /*
         * Checks if pubDate exists as a child of item node
         */
        if (getChildElement(item, "pubDate") != -1) {
            indexForDate = getChildElement(item, "pubDate");
            pubDate = item.child(indexForDate).child(0).label();

        }

        int indexForSource;

        /*
         * Checks if item has "source" child
         */
        if (getChildElement(item, "source") != -1) {
            indexForSource = getChildElement(item, "source");
            url = item.child(indexForSource).attributeValue("url");

            /*
             * If "source" node has children, we get the source string of the
             * item
             */
            if (item.child(indexForSource).numberOfChildren() > 0) {
                source = item.child(indexForSource).child(0).label();
            }
        }

        int indexForLink;

        /*
         * Checks if "link" exists within the item node
         */
        if (getChildElement(item, "link") != -1) {
            indexForLink = getChildElement(item, "link");
            link = item.child(indexForLink).child(0).label();

        }

        out.println("  <tr>");
        out.println("   <th>" + pubDate + "</th>");
        out.println("   <th><a href='" + url + "'>" + source + "</a></th>");
        out.println(
                "   <th><a href='" + link + "'>" + titleOrDescr + "</a></th>");
        out.print("  </tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Input URL of an RSS 2.0 feed: ");
        String userUrl = in.nextLine();
        XMLTree tree = new XMLTree1(userUrl);

        /*
         * Asks the name of the output file
         */
        out.println("Input name of HTML file: ");
        String userHTML = in.nextLine();
        SimpleWriter outHTML = new SimpleWriter1L(userHTML + ".html");

        /*
         * Checks if root node is a tag, and if it is, check if the label equals
         * to "rss"
         */
        if (tree.isTag() && tree.label().equals("rss")) {

            /*
             * Checks if node has attribute "version" and if it does, checks if
             * it has version 2.0
             */
            if (tree.hasAttribute("version")
                    && tree.attributeValue("version").equals("2.0")) {
                XMLTree channel = tree.child(0);
                outputHeader(channel, outHTML);

                /*
                 * Goes through all the children and outputs the processed item
                 * to the html file
                 */
                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    if (channel.child(i).label().equals("item")) {
                        processItem(channel.child(i), outHTML);
                    }
                }
            } else {
                out.println("Sorry, not RSS or version 2.0");
            }

        }

        outputFooter(outHTML);

        in.close();
        out.close();
        outHTML.close();
    }

}
