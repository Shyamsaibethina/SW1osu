import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to evaluate XMLTree expressions of {@code int}.
 *
 * @author Shyam Sai Bethina
 *
 */
public final class XMLTreeIntExpressionEvaluator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private XMLTreeIntExpressionEvaluator() {
    }

    /**
     * Evaluate the given expression.
     *
     * @param exp
     *            the {@code XMLTree} representing the expression
     * @return the value of the expression
     * @requires <pe> exp to not have 0 as the second child of a division node
     *           if there is one(no division by 0) [exp is a subtree of a
     *           well-formed XML arithmetic expression] and [the label of the
     *           root of exp is not "expression"] All operational results should
     *           be positive </pre>
     * @ensures evaluate = [the value of the expression]
     */
    private static int evaluate(XMLTree exp) {
        assert exp != null : "Violation of: exp is not null";

        int result = 0;

        if (!exp.label().equals("number")) {
            //Each node only has two child nodes
            int firstNum = evaluate(exp.child(0));
            int secondNum = evaluate(exp.child(1));

            //does the operation depending on what type of label the node is
            if (exp.label().equals("plus")) {
                result = firstNum + secondNum;
            } else if (exp.label().equals("minus")) {
                assert secondNum < firstNum : "Violation of: Negative result when subtracting";
                result = firstNum - secondNum;
            } else if (exp.label().equals("times")) {
                result = firstNum * secondNum;
            } else {
                assert secondNum != 0 : "Violation of: division by 0";
                result = firstNum / secondNum;
            }

        } else {
            //if the label does equal number, then returns the value of the number instead
            result = Integer.parseInt(exp.attributeValue("value"));
        }

        return result;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the name of an expression XML file: ");
        String file = in.nextLine();
        while (!file.equals("")) {
            XMLTree exp = new XMLTree1(file);
            out.println(evaluate(exp.child(0)));
            out.print("Enter the name of an expression XML file: ");
            file = in.nextLine();
        }

        in.close();
        out.close();
    }

}
